{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Introduction to Theoretical Machines\"\n",
        "description: \"Exploring theory of computation with Python\"\n",
        "date: \"2025-08-25\"\n",
        "date-format: long\n",
        "author: Gregory M. Kapfhammer\n",
        "execute:\n",
        "  echo: true\n",
        "format:\n",
        "  live-revealjs:\n",
        "    completion: true\n",
        "    theme: default\n",
        "    css: ../css/styles.css\n",
        "    history: false\n",
        "    scrollable: true\n",
        "    transition: slide\n",
        "    highlight-style: github\n",
        "    footer: \"Proofgrammers\"\n",
        "---\n",
        "\n",
        "# Theory of computation\n",
        "\n",
        "::: {.fragment style=\"margin-top: -0.5em; font-size: 0.8em;\"} \n",
        "\n",
        "- {{< iconify fa6-solid lightbulb >}} **What is theory of computation?**\n",
        "    - Understanding what can be computed\n",
        "    - Analyzing computational complexity\n",
        "    - Proving limits of computation\n",
        "    - \"Proofgrammers\" combine *proofs* and *programming*\n",
        "\n",
        ":::\n",
        "\n",
        "::: {.fragment style=\"margin-top: -0.5em; font-size: 0.8em;\"}\n",
        "\n",
        "- {{< iconify fa6-solid lightbulb >}} **Why is it important?**\n",
        "    - Helps determine if problems are solvable\n",
        "    - Reveals fundamental computational limits\n",
        "    - Guides key algorithm design choices\n",
        "    - Undergirds modern cryptography and security\n",
        "\n",
        ":::\n",
        "\n",
        "## Becoming a proofgrammer\n",
        "\n",
        "::: {.incremental style=\"margin-top: -0.15em; font-size: 0.95em;\"}\n",
        "\n",
        "- {{< iconify fa6-solid gear >}} **Master Python programming**\n",
        "  - Implement theoretical concepts as code\n",
        "  - Express mathematical proofs as programs\n",
        "  - Analyze algorithmic complexity\n",
        "- {{< iconify fa6-solid gear >}} **Understand computational theory**\n",
        "  - Automata and formal languages\n",
        "  - Decidability and undecidability\n",
        "  - Complexity classes and reductions\n",
        "- {{< iconify fa6-solid lightbulb >}} **Use programming to explore what can be computed!**\n",
        "\n",
        ":::\n",
        "\n",
        "## What does a proofgrammer do?\n",
        "\n",
        "::: {.incremental style=\"margin-top: 0.1em; font-size: 0.9em;\"}\n",
        "\n",
        "- **Proofgrammer** =\n",
        "  - **Proof** (mathematical verification) +\n",
        "  - **Programming** (code implementation)\n",
        "- Implement Turing machines and automata\n",
        "- Prove undecidability results with Python code\n",
        "- Analyze algorithmic complexity experimentally\n",
        "- Create computational models of theoretical concepts\n",
        "- Verify theoretical results through programming\n",
        "- **Welcome to the proofgrammer team! How exciting!**\n",
        "\n",
        ":::\n",
        "\n",
        "## Define the `count_lines` function"
      ],
      "id": "9aa7d8f0"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "def count_lines(file_content: str) -> int:\n",
        "    \"\"\"Count the number of lines in the provided text content.\"\"\"\n",
        "    if not file_content:\n",
        "        return 0\n",
        "    lines = file_content.split('\\n')\n",
        "    return len(lines)"
      ],
      "id": "084cfec9",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: {.fragment style=\"margin-top: 0.25em; font-size: 0.9em;\"}\n",
        "\n",
        "- **Computable problems**: have clear, algorithmic solutions\n",
        "- **Line counting**: decidable and tractable for any finite input\n",
        "- **Function input**: various types of input strings possible\n",
        "- **Important question**: what makes this problem computable?\n",
        "- **Translate to uncomputable**: can you make this more difficult?\n",
        "- {{< iconify fa6-solid lightbulb >}} **Differences in tractable, intractable, and uncomputable?**\n",
        "\n",
        ":::\n",
        "\n",
        "## Computable problems with Python"
      ],
      "id": "a824a6cb"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# example source code content\n",
        "sample_code = \"\"\"def hello_world():\n",
        "    print(\"Hello, Proofgrammers!\")\n",
        "    return True\n",
        "\n",
        "def main():\n",
        "    result = hello_world()\n",
        "    print(f\"Function executed: {result}\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\"\"\"\n",
        "\n",
        "# count lines in the sample code\n",
        "line_count = count_lines(sample_code)\n",
        "print(f\"Number of lines in the sample code: {line_count}\")\n",
        "print(f\"This is a computable problem - we can always determine the line count!\")"
      ],
      "id": "8f331592",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Try the `count_lines` function\n",
        "\n",
        "```{pyodide}\n",
        "#| autorun: true\n",
        "#| max-lines: 10\n",
        "def count_lines(file_content: str) -> int:\n",
        "    \"\"\"Count the number of lines in the provided text content.\"\"\"\n",
        "    if not file_content:\n",
        "        return 0\n",
        "    lines = file_content.split('\\n')\n",
        "    return len(lines)\n",
        "\n",
        "# test with sample code\n",
        "test_code = \"\"\"def fibonacci(n):\n",
        "    if n <= 1:\n",
        "        return n\n",
        "    return fibonacci(n-1) + fibonacci(n-2)\n",
        "\n",
        "print(fibonacci(5))\"\"\"\n",
        "\n",
        "line_count = count_lines(test_code)\n",
        "print(f\"Lines in Fibonacci code: {line_count}\")\n",
        "print(\"Try changing the code above to see the count change!\")\n",
        "```\n",
        "\n",
        "::: {.fragment style=\"margin-top: 0.25em; font-size: 0.95em;\"}\n",
        "\n",
        "- This function accepts the source code of a program as input\n",
        "- It processes the source code *without* running it directly\n",
        "\n",
        ":::\n",
        "\n",
        "## Universal computation with Python\n",
        "\n",
        "```{pyodide}\n",
        "#| autorun: true\n",
        "#| max-lines: 10\n",
        "def universal(prog_string: str, input_string: str) -> str:\n",
        "    \"\"\"Execute a program given as a string on the provided input.\"\"\"\n",
        "    local_namespace = {}\n",
        "    exec(prog_string, {}, local_namespace)\n",
        "    main_function = None\n",
        "    for name, obj in local_namespace.items():\n",
        "        if callable(obj) and not name.startswith('_'):\n",
        "            main_function = obj\n",
        "            break\n",
        "    if main_function:\n",
        "        return main_function(input_string)\n",
        "    else:\n",
        "        return \"No function found\"\n",
        "\n",
        "# example program that checks if a string contains \"GAGA\"\n",
        "contains_gaga_program = '''\n",
        "def contains_gaga(input_str):\n",
        "    \"\"\"Check if the input string contains GAGA.\"\"\"\n",
        "    return \"yes\" if \"GAGA\" in input_str else \"no\"\n",
        "'''\n",
        "\n",
        "# demonstrate universal computation\n",
        "test_string1 = \"HELLO GAGA WORLD\"\n",
        "test_string2 = \"programming\"\n",
        "\n",
        "# Example program that counts vowels\n",
        "count_vowels_program = '''\n",
        "def count_vowels(input_str):\n",
        "    \"\"\"Count the number of vowels in the input string.\"\"\"\n",
        "    vowels = \"aeiouAEIOU\"\n",
        "    count = sum(1 for char in input_str if char in vowels)\n",
        "    return str(count)\n",
        "'''\n",
        "\n",
        "print(\"Universal Computation in Action:\")\n",
        "print(\"================================\")\n",
        "print(f\"Testing contains_gaga with '{test_string1}':\")\n",
        "result1 = universal(contains_gaga_program, test_string1)\n",
        "print(f\"Result: {result1}\")\n",
        "\n",
        "print(f\"\\nTesting count_vowels with '{test_string2}':\")\n",
        "result2 = universal(count_vowels_program, test_string2)\n",
        "print(f\"Result: {result2}\")\n",
        "```\n",
        "\n",
        "## Let's discuss these examples!\n",
        "\n",
        "::: {.fragment style=\"margin-top: 0.1em; font-size: 0.85em;\"}\n",
        "\n",
        "- {{< iconify game-icons team-idea >}} **Key insights from these code examples:**\n",
        "  - `universal`: demonstrates one program executing another program\n",
        "  - **Universal computation** is central to general-purpose computers\n",
        "  - Simple example to illustrate a powerful theoretical concept\n",
        "\n",
        ":::\n",
        "\n",
        "::: {.fragment style=\"margin-top: 0.1em; font-size: 0.85em;\"}\n",
        "\n",
        "- {{< iconify game-icons team-idea >}} **Discuss in your teams:**\n",
        "    - What makes the line counting problem computable?\n",
        "    - Universal computation's relation to general-purpose computers?\n",
        "    - What are the implications of programs executing programs?\n",
        "    - What are the limits to implementing computer programs?\n",
        "\n",
        ":::\n",
        "\n",
        "# Don't assume it is possible to implement every Python program! Start to think like a proofgrammer!\n",
        "\n",
        "## Computational challenges\n",
        "\n",
        "::: {.incremental style=\"margin-top: -0.15em; font-size: 0.95em;\"}\n",
        "\n",
        "- {{< iconify fa6-solid gear >}} **Characterize computational problems**\n",
        "  - What makes a problem computable or non-computable?\n",
        "  - How do we measure algorithmic complexity?\n",
        "  - What are the fundamental limits of computation?\n",
        "- {{< iconify fa6-solid gear >}} **Compare and analyze algorithms**\n",
        "  - Which approach is more efficient for large inputs?\n",
        "  - How do we prove correctness of our implementations?\n",
        "  - What tools help us understand computational behavior?\n",
        "\n",
        ":::\n",
        "\n",
        "## Theory of computation challenges\n",
        "\n",
        "::: {.incremental}\n",
        "\n",
        "- Abstract concepts require concrete implementations\n",
        "- Proofs must be both rigorous and programmable\n",
        "- Complexity analysis involves theory and experimentation\n",
        "- Undecidability results challenge often intuition\n",
        "- Think you finished a proof that is actually incorrect\n",
        "- Connecting mathematical theory to practical programming\n",
        "- **Make sure to regularly ask questions in Discord!**\n",
        "- **Frequently schedule office hours with the instructor!**\n",
        "\n",
        ":::\n",
        "\n",
        "## Learn about theory of computation\n",
        "\n",
        ":::: {.columns}\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "\n",
        "{{< iconify fa6-solid book-open >}} Explore the [\"What Can be Computed\"\n",
        "textbook](https://whatcanbecomputed.com/) and [Python\n",
        "documentation](https://docs.python.org/)\n",
        "\n",
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "\n",
        "{{< iconify fa6-brands github >}} Review computational examples like [WCBC\n",
        "book](https://whatcanbecomputed.com/)'s code segments and slides\n",
        "\n",
        ":::\n",
        "\n",
        "::::\n",
        "\n",
        "::: {.fragment .fade-down style=\"margin-top: -0.15em; font-size: 0.95em;\"}\n",
        "\n",
        "- {{< iconify fa6-solid lightbulb >}} **Key areas of focus**:\n",
        "  - Python programming for theoretical concepts\n",
        "  - Automata theory and formal languages  \n",
        "  - Computational complexity and analysis\n",
        "  - Decidability and undecidability proofs\n",
        "  - Practical applications of theoretical machines\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        "## Essential tools\n",
        "\n",
        "- Terminal window for command-line operations\n",
        "- Git and GitHub for version control and collaboration\n",
        "- VS Code for writing and testing Python code\n",
        "- Uv for Python package and dependency management\n",
        "- Quarto for creating interactive documents with code\n",
        "\n",
        "::: {.fragment .fade .boxed-content style=\"margin-top: 0.25em; font-size: 0.9em;\"}\n",
        "\n",
        "{{< iconify fa6-solid microscope >}} How do we *implement* theoretical concepts\n",
        "in code? How do we *verify* computational results? How do we *document* our\n",
        "proofs effectively? How do we *apply* these insights to real-world problems?\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        "## Using AI in theoretical machines\n",
        "\n",
        "::: {.fragment style=\"margin-top: 0.1em; font-size: 0.85em;\"}\n",
        "\n",
        "- GitHub Copilot, Google Gemini CLI, or OpenCode assist with code:\n",
        "  - Generated code theoretically correct and well-implemented?\n",
        "  - Can the generated code help verify mathematical proofs?\n",
        "  - Does the generated code follow programming best practices?\n",
        "  - Can you integrate AI-generated code into your proof workflows?\n",
        "\n",
        ":::\n",
        "\n",
        "::: {.fragment .fade .boxed-content style=\"margin-top: -0.1em; font-size: 0.8em;\"}\n",
        "\n",
        "{{< iconify fa6-solid lightbulb >}} Proofgrammers who use AI coding tools are\n",
        "responsible for ensuring correctness, theoretical accuracy, and ethical use. Do\n",
        "not assume that the explanation or a proof of a theoretical concept is correct.\n",
        "**Although these tools can be helpful, you must use them with skepticism and\n",
        "care.**\n",
        "\n",
        ":::\n",
        "\n",
        "# Let's set up your proofgramming environment!\n",
        "\n",
        "- Classroom session on Tuesday\n",
        "- Laboratory session on Tuesday\n",
        "- Classroom session on Thursday\n",
        "\n",
        "## Proofgramming environment\n",
        "\n",
        "::: {.fragment style=\"margin-top: 0.1em; font-size: 0.9em;\"}\n",
        "\n",
        "- Terminal with command-line access for tool execution\n",
        "- Version control system (Git with GitHub)\n",
        "- Python development environment (UV + Python 3.12+)\n",
        "- Code editor with syntax highlighting (VS Code + extensions)\n",
        "- Documentation system (Quarto for interactive code/text)\n",
        "- Assistants (GitHub Copilot, Google Gemini CLI, OpenCode)\n",
        "- **Make sure that every member of your team for the first presentation can\n",
        "effectively setup and use all of these tools!**\n",
        "- **Schedule office hours with the course instructor for help!**\n",
        "\n",
        ":::\n",
        "\n",
        "## Development environment setup\n",
        "\n",
        "- **Installing** essential tools for prosegrammers\n",
        "- **Configuring** development environment for proofgramming\n",
        "  - Complete these tasks during the first and second weeks\n",
        "  - All skill-check and examinations assume working setup\n",
        "  - Please attend the **SOS Week** events to learn more\n",
        "  - Work with instructor and student technical leaders\n",
        "  - Don't hesitate to regularly ask questions in Discord\n",
        "  - Keep working and don't give up with setup tasks\n",
        "\n",
        "## Essential tools for proofgrammers\n",
        "\n",
        "::: {.fragment .callout-note icon=true title=\"Tips for effective theoretical machines setup\"}\n",
        "\n",
        "- [Git](https://git-scm.com/), [GitHub](https://github.com/), [GitHub\n",
        "Education](https://github.com/education), and [GitHub Student Developer\n",
        "Pack](https://education.github.com/pack)\n",
        "- [GitHub SSH\n",
        "Keys](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent)\n",
        "and [GitHub CLI](https://cli.github.com/) command-line program for interaction\n",
        "with GitHub\n",
        "- Free GitHub Pro Subscription for [GitHub\n",
        "Copilot](https://github.com/features/copilot)\n",
        "- [VS Code](https://code.visualstudio.com/) or another suitable text editor\n",
        "(e.g., [Zed](https://zed.dev/) or [Neovim](https://neovim.io/))\n",
        "- [Quarto](https://quarto.org/) CLI and the Quarto plugin for your text editor\n",
        "- [Uv](https://docs.astral.sh/uv/) for [Python](https://www.python.org/)\n",
        "installation, virtual environment and dependency management\n",
        "- Make sure that Uv has installed [Python](https://www.python.org/) 3.12 or\n",
        "Python 3.13\n",
        "- The suite of tools from the [Node Package Manager](https://www.npmjs.com/),\n",
        "include [npm](https://www.npmjs.com/) and [npx](https://www.npmjs.com/)\n",
        "- [OpenCode](https://opencode.ai/) and [Google Gemini\n",
        "CLI](https://github.com/google-gemini/gemini-cli) for AI Coding Agents, runnable\n",
        "with npx\n",
        "- Terminal window (e.g., [Warp](https://www.warp.dev/)) for running all of the\n",
        "aforementioned programs\n",
        "\n",
        ":::\n",
        "\n",
        "## GitHub student benefits and copilot\n",
        "\n",
        "::: {.incremental style=\"margin-top: -0.15em; font-size: 0.95em;\"}\n",
        "\n",
        "- {{< iconify fa6-solid gear >}} **GitHub Student Developer Pack**\n",
        "  - Free access to premium developer tools and services\n",
        "  - Apply at [education.github.com](https://education.github.com/pack)\n",
        "  - Requires verification with .edu email or student ID\n",
        "- {{< iconify fa6-solid gear >}} **GitHub Copilot Pro for Students**\n",
        "  - AI-powered code completion and generation\n",
        "  - Free for verified students and educators\n",
        "  - Integrates with VS Code and other editors\n",
        "- {{< iconify fa6-solid lightbulb >}} **Why GitHub tools?** Essential for\n",
        "collaboration!\n",
        "\n",
        ":::\n",
        "\n",
        "## Checking your proofgrammer setup\n",
        "\n",
        "```bash\n",
        "# Run these commands in your terminal window\n",
        "git --version                   # Check Git installation\n",
        "python --version                # Check Python (via UV)\n",
        "quarto --version                # Check Quarto installation\n",
        "code --version                  # Check VS Code installation\n",
        "uv --version                    # Check UV package manager\n",
        "```\n",
        "\n",
        "::: {.fragment .fade style=\"margin-top: 0.5em; font-size: 0.9em;\"}\n",
        "\n",
        "- **Test each tool individually** before starting projects\n",
        "- **Create a test document** with code and text to verify integration\n",
        "- **Consult documentation** links when troubleshooting\n",
        "- **Schedule office hours** with the course instructor\n",
        "- **Visit office hours** with the student technical leaders\n",
        "- {{< iconify fa6-solid rocket >}} **Have these setup by the end of this week**!\n",
        "\n",
        ":::\n",
        "\n",
        "## Coding Agents Use Node.js tools\n",
        "\n",
        "```bash\n",
        "# Install Node.js and npm from nodejs.org\n",
        "# Then use npx to run tools without permanent installation\n",
        "npx @google/generative-ai-cli --version  # Google Gemini CLI\n",
        "npx opencode --version                   # OpenCode AI assistant\n",
        "```\n",
        "\n",
        "::: {.fragment .fade style=\"margin-top: 0.5em; font-size: 0.9em;\"}\n",
        "\n",
        "- **Node.js**: JavaScript runtime enabling AI-powered coding assistants\n",
        "- **NPX**: Run packages without installing globally, keeps system clean\n",
        "- **Runtime**: Use Node for delivery, may be built in another language\n",
        "- **Testing**: Authentication with GitHub or Google and work with the coding\n",
        "agent to determine whether or not a problem is tractable or intractable. Ask\n",
        "the agent to explain one of the code segments from the book, without stating\n",
        "whether or not the code is a correct.\n",
        "\n",
        ":::\n",
        "\n",
        "# Can you clone the course website to your laptop and run `quarto preview`? Output?\n",
        "\n",
        "::: {.fragment .fade style=\"margin-top: 0em; font-size: 0.9em;\"}\n",
        "\n",
        "- Fork the website's repository for your team\n",
        "- Commit your presentation materials\n",
        "- Create a PR request and ask for its review\n",
        "\n",
        ":::\n",
        "\n",
        "## Overall proofgramming setup\n",
        "\n",
        "::: {.fragment .callout-note icon=true title=\"Tips for effective theoretical machines setup\"}\n",
        "\n",
        "- Devote time outside class to installing and configuring tools\n",
        "- Confirm that most tools work during the first lab session\n",
        "- Successfully get all tools to work during the first lab session\n",
        "- Create and render test documents with the provided examples\n",
        "- Complete the first proofgrammer presentation on time\n",
        "- Contribute to collaborative presentation projects\n",
        "- Prepare for first proofgrammer charette session\n",
        "\n",
        "- {{< iconify fa6-solid rocket >}} **Get ready for an exciting journey into theoretical machines!**\n",
        "- {{< iconify fa6-solid lightbulb >}} **If you are having trouble, publicly ask for help on Discord!**\n",
        "\n",
        ":::\n",
        "\n",
        "## Course goals\n",
        "\n",
        "::: {.fragment .fade style=\"margin-top: -0.15em; font-size: 0.85em;\"}\n",
        "\n",
        "- **Computational Implementation**:\n",
        "  - Design and implement theoretical concepts as Python programs\n",
        "  - Create frameworks for running proofs as Python programs\n",
        "  - Test all aspects of implementations to ensure correctness\n",
        "- **Communicate** theoretical insights through **code** and **documentation**\n",
        "- **Explain** and **evaluate** insights during **presentation sessions**\n",
        "- Participate in **charette sessions** to discuss and learn from each other\n",
        "- **Key next steps**:\n",
        "  - Review the [course schedule](../../schedule/index.qmd)\n",
        "  - Study the [course syllabus](../../syllabus/index.qmd)\n",
        "\n",
        ":::"
      ],
      "id": "2775e7af"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\bhana\\AppData\\Local\\Programs\\Python\\Python313\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}