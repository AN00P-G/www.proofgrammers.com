---
title: "Build a Bug Detection System"
description: "Creating a limited defect detector and Why a full Implementation is not possible"
date: "2025-09-1"
date-format: long
author: Preston Smith, Bendik Kaibas, Duru Akbas & Miguel Orti Vila
execute:
  echo: true
format:
  live-revealjs:
    completion: true
    theme: default
    css: ../css/styles.css
    history: false
    scrollable: true
    transition: slide
    highlight-style: github
    footer: "Proofgrammers"
---

## Bug Detector

```{pyodide}
#| autorun: true
#| max-lines: 7
def crash_on_input(source_code: str, input: str = ""):
    """Run a program with input and check if it crashes."""
    try:
        env = {"input": input}
        exec(source_code, env)
        return f"Program ran successfully on input|{input}|"
    except Exception as e:
        return f"Program crashed on input|{input}| with error: {e}"


test_source_code = """def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n-1) + fibonacci(n-2)
fibonacci(int(input))"""

inputs = [x for x in range(10)]
inputs.append("a")
for input in inputs:
    print(f"{crash_on_input(test_source_code, input)}")
```


## Syntax Checker

```{pyodide}
#| autorun: true
#| max-lines: 10

import ast

def check_syntax(text: str):
    try:
        ast.parse(text)
        print("No syntax errors found.")
    except SyntaxError as e:
        print(f"Syntax error: {e}")
        

def run_scanner(source_code: str):
    check_syntax(source_code)

test_source_code = """def fibonacci(n):
    if n <= 1
        return n
    return fibonacci(n-1) + fibonacci(n-2)

print(fibonacci(5))"""

crash_on_input(test_source_code)


```


## PlaceHolder

## PlaceHolder

## PlaceHolder

## PlaceHolder