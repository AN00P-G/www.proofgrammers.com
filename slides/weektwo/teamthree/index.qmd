---
title: "Text Mutation System"
description: "Learn how to randomly mutate text"
date: "2025-09-01"
date-format: long
author: Alexander Goddard, Abishek Dhakal, Joesph Oforkansi, Ritesh Ojha
execute:
  echo: true
  engine: python
format:
  live-revealjs:
    completion: true
    theme: default
    css: ../../css/styles.css
    history: false
    scrollable: true
    transition: slide
    highlight-style: github
    footer: "Proofgrammers"
---

# Source code & Explanation

::: {.fragment style="margin-top: -0.5em; font-size: 0.8em;"} 

- {{< iconify fa6-solid lightbulb >}} **What does this script do?**
    - Reads a text file (`input.txt`)
    - Mutates characters randomly based on a mutation rate
    - Saves the mutated text to (`mutated.txt`)
    - Useful for testing algorithms or simulating text variations

```python
import random
import string

# Path of text file
path = "input.txt"

# Read the original text
with open(path, "r") as file:
    text = file.read()
print("Original Text:", text)

# Function to randomly mutate text
def mutate_text(text, mutation_rate=0.1):
    mutated = ""
    for char in text:
        if random.random() < mutation_rate:
            mutated += random.choice(string.ascii_letters)
        else:
            mutated += char
    return mutated

# Apply mutation with 20% mutation rate
mutated_text = mutate_text(text, mutation_rate=0.2)
print("Mutated Text:", mutated_text)

# Save the mutated text to a file
with open("mutated.txt", "w") as file:
    file.write(mutated_text)







    
```

:::

# Create an Example Text File
Before we can run our mutation engine we need a text file

```{pyodide}
#| max-lines: 10
#| autorun: true

# File information
file_name = "input.txt"
content = "Hi! This is Group three, testing some protoype for mutation engine. Please check it out and let us know if it works."

# Open the file in write mode ('w')
with open(file_name, 'w') as file:
    # Write the content to the file
    file.write(content)

print(f"File '{file_name}' created and written successfully.\nFile content: '{content}'")

```

# Test the mutation engine!
Now that we have a text file we can test our mutation engine t

```{pyodide}
#| max-lines: 10
import random
import string
import os

# Path to text file
path = "input.txt"

# Read the original text
with open(path, "r") as file:
    text = file.read()
print("Original Text:", text)

# Function to randomly mutate text
def mutate_text(text, mutation_rate=0.1):
    mutated = ""
    for char in text:
        if random.random() < mutation_rate:
            mutated += random.choice(string.ascii_letters)
        else:
            mutated += char
    return mutated

# Apply mutation with 20% mutation rate
mutated_text = mutate_text(text, mutation_rate=0.2)
print("Mutated Text:", mutated_text)

# Save the mutated text to a file
with open("mutated.txt", "w") as file:
    file.write(mutated_text)
```

# Tractable & Why Our Text Mutation Engine is Tractable

## What is Tractable?
- A problem is **tractable** if it can be solved in a **reasonable amount of time**, even as input grows.  
- Time grows at a **manageable rate** (linear O(n) or polynomial O(n²)).  
- **Example:** Sorting numbers – doable even for large lists.  
- **Non-tractable example:** Trying every possible chess game – grows too fast to finish.

## Why Our Text Mutation Engine is Tractable
- Looks at each character **once**.  
- Each character: quick check + mutation (insert, delete, substitute, swap) → **O(1)**.  
- Total work grows **linearly with text size** → O(n).  
- **Example:**  
  - 100 characters → ~100 steps  
  - 1,000,000 characters → ~1,000,000 steps (still fast on a computer)  
- Efficient and scalable.

::: 

# Results and Q&A
::: {.fragment style="margin-top: -0.5em; font-size: 0.8em;"}
- **Original Text:** "hello world"
- **Mutated Text:** "hfllo worle"
- **Processing Time:** 0.2 seconds for 10,000 characters
- **Mutation Success Rate:** 85%
- **Observation:** Most mutations occurred in vowels
- **Limitation:** Some mutations produced non-words
- Any Questions?? 
:::




