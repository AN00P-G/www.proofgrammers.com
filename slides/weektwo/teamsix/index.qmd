---
title: "Build a Bug Detection System"
description: "Explore why bug detection is uncomputable"
date: "2025-09-01"
date-format: long
author: Preston Smith, Benedek Kaibas, Duru Akbas and Miguel Orti Vila
execute:
  echo: true
format:
  live-revealjs:
    completion: true
    theme: default
    css: ../../css/styles.css
    history: false
    scrollable: true
    transition: slide
    highlight-style: github
    footer: "Proofgrammers"
---

## Bug Detecting through Fuzzing

```{pyodide}
#| autorun: true
#| max-lines: 7
import random

def crash_on_input(source_code: str, input: str = ""):
    """Run a program with input and check if it crashes."""
    try:
        env = {"input": input}
        exec(source_code, env)
        return f"Program ran successfully on input|{input}|"
    except Exception as e:
        return f"Program crashed on input|{input}| with error: {e}"


test_source_code = """def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n-1) + fibonacci(n-2)
fibonacci(int(input))"""

choices = ["a","b","c","d","e","f","g","h","i",1,2,3,4,5,6,7,8,9]

inputs = [random.choice(choices) for _ in range(5)]
for input in inputs:
    print(f"{crash_on_input(test_source_code, input)}")
```


## Detecting Syntactical Errors

```{pyodide}
#| autorun: true
#| max-lines: 10
import ast

def check_syntax(text: str):
    try:
        ast.parse(text)
        print("No syntax errors found.")
    except SyntaxError as e:
        print(f"Syntax error: {e}")
        

def run_scanner(source_code: str):
    check_syntax(source_code)

test_source_code = """def fibonacci(n):
    if n <= 1
        return n
    return fibonacci(n-1) + fibonacci(n-2)

print(fibonacci(5))"""

run_scanner(test_source_code)
```

## Detecting Unused variables

```{pyodide}
#| autorun: true
#| max-lines: 15
"""Detecting unused variables from Python input files."""


def detect_unused_variables():
    """Detect unused variables from using the AST generated by store_ast()"""

    text = """def uv():
        iterator = 0
        limit = 100 # we use limit as an unused variable which our linter program has to catch
        while iterator != 50:
            print(iterator)
    """
    lines = text.splitlines()

    for line in lines:
        split_lines = line.strip()
        word = "limit"
        if word in split_lines:
            count_word = word.count("limit")  # I only look for a specific word

            if count_word == 1:
                print(f"We found an unused variable: {word}")
            else:
                print("The file you have provided does not have unused variables!")

detect_unused_variables()

```


## Detecting Unclosed Print Statements

```{pyodide}
#| autorun: true
#| max-lines: 15
import ast

def check_syntax(text: str):
    try:
        ast.parse(text)
        print("No syntax errors found.")
    except SyntaxError as e:
        print(f"Syntax error: {e}")

test_source_code = """def calculate_sum(numbers):
    total = 0
    for n in numbers:
        total += n
    if total > 10:
        print("Large sum"
    else:
        print("Small sum")
    return total

calculate_sum([1, 2, 3, 7])
"""

check_syntax(test_source_code)

```

- Using AST to not to execute but to review the code by creating a string 
- If the code did not have defects in them, it still would not print anything 
- The unclosed print statements or parantheses will always be caught by ast.parse() method