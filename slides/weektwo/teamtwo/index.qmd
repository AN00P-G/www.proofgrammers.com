---
title: "Markdown Search Engine"
description: "Explore tractability of search engines"
date: "2025-09-02"
date-format: long
author: Veronica McNeece, Levente Mihaly, Anoop Guragain, Javier Bejarano
execute:
  echo: true
format:
  revealjs:
    theme: default
    css: ../../css/styles.css
    transition: slide
    highlight-style: github
    footer: "Proofgrammers"
---

# Theory of Computation

::: {.fragment style="margin-top: -0.5em; font-size: 0.8em;"} 
- {{< iconify fa6-solid lightbulb >}} **What is theory of computation?**
    - Understanding what can be computed
    - Analyzing computational complexity
    - Proving limits of computation
    - "Proofgrammers" combine *proofs* and *programming*
:::

---

# Key Terms

 - Markdown
 - Search engine
 - Index
 - Document
 - Text

---

### Types of Problems in Computers

- **Tractable**
- **Intractable**
- **Uncomputable**

## Tractable
- A problem that can be solved in **polynomial time** (efficiently).
- The Markdown search engine is tractable because it runs in polynomial time: indexing is linear in the size of the corpus, and queries are linear in the length of the query plus the number of results.
- Example: Searching a list of documents
- **Analogy:** Finding a book on a small shelf — quick and easy

## Intractable
- A problem that is solvable, but only with **exponential time** algorithms.
- Becomes impractical for large inputs
- Example: Traveling Salesman Problem
- **Analogy:** Searching a huge library without a catalog — takes forever

## Uncomputable
- A problem that **cannot** be solved by any algorithm.
- **Analogy:** Asking if a magic book will ever finish writing itself — impossible to know

---

# How It Relates to Search Engines

- **Markdown search engine = tractable problem**  
  - Keyword search can be solved in polynomial time.  
  - Scales efficiently with number of documents.  

- **Intractable examples**  
  - Perfectly understanding "meaning" of text or answering open-ended questions.  

- **Uncomputable examples**  
  - Determining whether an arbitrary program will halt (not related to search).  

---

## Understanding Tractability Through Two Approaches

- **Simple Search (`search_documents`)**
  - Scans through each document, one by one
  - Finds matches with `if query.lower() in doc.lower():`
  - Easy to understand, but slows down as data grows  

- **Improved Search (`Index` class)**
  - Instead of scanning everything each time, you prepare a map (**inverted index**). 
  - Searches become much faster, especially with many files  
  - Supports multiple-word queries and snippets  

---

# Why This Matters

> The simple version shows tractability in its most basic form (linear scan).  
> The improved version shows how indexing makes searching scale much better in practice.

---

# Example: Markdown Search Engine

```python
# markdown_search.py

def search_documents(query, documents):
    """
    Return list of documents that contain the query string.
    """
    results = []
    for i, doc in enumerate(documents, start=1):
        if query.lower() in doc.lower():
            results.append(f"Document {i}")
    return results


# Example usage
docs = [
    "# Title One\nThis is a sample markdown document about computation.",
    "# Title Two\nThis file talks about search engines and algorithms.",
    "# Title Three\nComputation theory includes tractable problems."
]

query = "computation"
print("Searching for:", query)
print("Results:", search_documents(query, docs))
