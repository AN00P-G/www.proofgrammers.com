---
pagetitle: "Proofgrammers"
layout: full
toc: false
---

![](images/Proofgrammers-Logo.png){fig-align="center" width="125%"}

## Become a Proofgrammer

Welcome to the world of **Proofgrammers** --- where mathematical proofs meet
Python programming! The term "Proofgrammer" is a delightful combination of
"proof" (i.e., a precise explanation of the truth of a mathematical or
computational statement) and "programmer" (i.e., the people who write
software). As a proofgrammer, you'll master the art of using Python to create,
manipulate, and analyze proofs in the field of theoretical computer science.
You'll learn to express abstract mathematical concepts as concrete Python
programs that can be run, tested, and verified. This course focuses on the
theory of computation, exploring fundamental questions like "What can be
computed?" and "What can be computed efficiently?" Whether you're implementing
Turing machines, analyzing algorithmic complexity, or proving undecidability
results, proofgrammers use code to make theoretical concepts tangible and
accessible. Join us as we explore how to be both rigorous mathematical thinkers
and skilled programmers in the fascinating world of theoretical machines!

## Course Overview

With the goal of cultivating skilled proofgrammers, this web site features a
[sixteen-week schedule](schedule/index.qmd) filled with activities that
support the development of your professional and technical capacities in the
field of theoretical computer science. Although this site is best used by an
on-campus learner in the [Department of Computer and Information
Science](https://www.cis.allegheny.edu/) at [Allegheny
College](https://www.allegheny.edu/), the resources and projects are all
publicly available. This course teaches you to harness Python's power for
expressing mathematical proofs and exploring theoretical concepts, from simple
automata to complex undecidability results. You'll learn to use tools like
[Jupyter Notebooks](https://jupyter.org/) and [Quarto](https://quarto.org/) to
create interactive documents that blend theoretical proofs with executable
Python code. Throughout the course, you'll develop skills in implementing and
analyzing algorithms, understanding computational complexity, and proving
fundamental results in the theory of computation. In addition to learning more
about version control, [Git](https://git-scm.com/), and
[GitHub](https://github.com/), emerging proofgrammers will also learn how to
use artificial intelligence (AI) assistants [GitHub
Copilot](https://github.com/features/copilot), [Google Gemini
CLI](https://github.com/google-gemini/gemini-cli), and
[OpenCode](https://opencode.ai/) to create, revise, and extend both theoretical
proofs and source code implementations. Check out the
[schedule](schedule/index.qmd) and [slides](slides/index.qmd) to begin your
journey as a proofgrammer!

## Python for Theory of Computation

As you explore the technical resources on this site, you'll discover how Python
can transform the way that proofgrammers work with theoretical concepts. For
instance, here's a simple example of a Python implementation of a `count_lines`
function that counts the number of lines in a source code file --- this is an
example of a computable problem! This function takes a file path, opens the
file, and counts each line, demonstrating how we can algorithmically solve
problems that have clear, step-by-step solutions. This represents the kind of
computation that is always decidable and tractable. Notice that the website
itself includes the output from running this function!

```{python}
from typing import List
from pathlib import Path

def count_lines(file_content: str) -> int:
    """Count the number of lines in the provided text content."""
    if not file_content:
        return 0
    lines = file_content.split('\n')
    return len(lines)

# example source code content
sample_code = """def hello_world():
    print("Hello, Proofgrammers!")
    return True

def main():
    result = hello_world()
    print(f"Function executed: {result}")

if __name__ == "__main__":
    main()"""

# count lines in the sample code
line_count = count_lines(sample_code)
print(f"Number of lines in the sample code: {line_count}")
print(f"This is a computable problem - we can always determine the line count!")
```

Now let's explore the fascinating world of **non-computable** problems! The
following example demonstrates the famous **Halting Problem**, which asks:
"Given a program and an input, will the program halt or run forever?" This is
one of the most important results in theoretical computer science because Alan
Turing proved that no algorithm can solve this problem for all possible
programs. While we can't actually solve the halting problem in general, we can
create a Python function that illustrates why it's undecidable by showing the
logical contradiction that arises when we try to solve it.

```{python}
from typing import Callable, Any

def halting_oracle_contradiction() -> str:
    """Demonstrate why the Halting Problem is undecidable through contradiction."""
    # we cannot actually implement a true halting oracle,
    # but we can show the logical contradiction that would arise
    def hypothetical_halts(program: Callable, input_data: Any) -> bool:
        # this function cannot actually exist for all programs!
        # if it did exist, we could create the following contradiction:
        return True  # placeholder - this is impossible to implement correctly
    
    def problematic_program(x: Any) -> None:
        """A program that creates a contradiction if halting_oracle exists."""
        # if halting_oracle says this program halts on input x,
        # then we make it loop forever (don't halt)
        # if halting_oracle says this program doesn't halt on input x,
        # then we make it halt immediately
        if hypothetical_halts(problematic_program, x):
            while True:  # loop forever - contradiction!
                pass
        else:
            return  # halt immediately - contradiction!
    
    return """
The Halting Problem is undecidable because:
1. Assume we have a function that can determine if any program halts
2. We can construct a program that does the opposite of what the oracle predicts
3. This creates a logical contradiction - the oracle cannot exist!
4. Therefore, the Halting Problem is non-computable.
"""

# demonstrate the theoretical concept
explanation = halting_oracle_contradiction()
print("Understanding Non-Computability:")
print(explanation)
print("This is why some problems cannot be solved by any algorithm!")
```

## Theory of Computation Resources

Ready to embark on your journey as a proofgrammer? Start exploring here:

- The [sixteen-week course schedule](./schedule/index.qmd) provides detailed
insights into each step that learners should take to emerge as skilled
proofgrammers, including assignments focused on implementing theoretical
concepts, analyzing computational complexity, and projects that combine
mathematical proofs with Python programming.

- The [course syllabus](./syllabus/index.qmd) introduces the course and its
learning objectives, explaining how on-campus learners will develop both their
theoretical understanding and their ability to use Python to implement and
verify concepts from the theory of computation.

- The [course slides](./slides/index.qmd) offers links to the slides created
by both the instructor and the proofgrammers who are learning more about
theoretical computer science and computational theory.

::: {.callout-note appearance="minimal" title="Proofgrammers Community Resources"}

Interested in connecting with other aspiring proofgrammers? Please join the
[Proofgrammers Discord Server](https://discord.gg/Mw9mybGK7u) and join the
conversation about theoretical computer science, Python programming, and
computational theory! If you are an on-campus learner at Allegheny College, you
may also join the [Allegheny College Computer Science Discord
Server](https://discord.gg/CS2h9kXzX6). Finally, if you are an on-campus
learner, you can schedule an office hours appointment by visiting the [Course
Instructor's Appointment
Scheduler](https://www.gregorykapfhammer.com/schedule/).

:::
