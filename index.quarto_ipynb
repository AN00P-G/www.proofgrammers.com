{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "pagetitle: \"Proofgrammers\"\n",
        "layout: full\n",
        "toc: false\n",
        "---\n",
        "\n",
        "![](images/Proofgrammers-Logo.png){fig-align=\"center\" width=\"125%\"}\n",
        "\n",
        "## Become a Proofgrammer\n",
        "\n",
        "Welcome to the world of **Proofgrammers** --- where mathematical proofs meet\n",
        "Python programming! The term \"Proofgrammer\" is a delightful combination of\n",
        "\"proof\" (i.e., a precise explanation of the truth of a mathematical or\n",
        "computational statement) and \"programmer\" (i.e., the people who write\n",
        "software). As a proofgrammer, you'll master the art of using Python to create,\n",
        "manipulate, and analyze proofs in the field of theoretical computer science.\n",
        "You'll learn to express abstract mathematical concepts as concrete Python\n",
        "programs that can be run, tested, and verified. This course focuses on the\n",
        "theory of computation, exploring fundamental questions like \"What can be\n",
        "computed?\" and \"What can be computed efficiently?\" Whether you're implementing\n",
        "Turing machines, analyzing algorithmic complexity, or proving undecidability\n",
        "results, proofgrammers use Python code to make theoretical concepts tangible\n",
        "and accessible. Want to learn more about the theory of computation? Join us as\n",
        "we explore how to be both rigorous mathematical thinkers and skilled\n",
        "programmers in the world of proofgramming!\n",
        "\n",
        "## Course Overview\n",
        "\n",
        "With the goal of cultivating skilled proofgrammers, this web site features a\n",
        "[sixteen-week schedule](schedule/index.qmd) filled with activities that\n",
        "support the development of your professional and technical capacities in the\n",
        "field of theoretical computer science. Although this site is best used by an\n",
        "on-campus learner in the [Department of Computer and Information\n",
        "Science](https://www.cis.allegheny.edu/) at [Allegheny\n",
        "College](https://www.allegheny.edu/), the resources and projects are all\n",
        "publicly available. This course teaches you to harness Python's power for\n",
        "expressing mathematical proofs and exploring theoretical concepts, from simple\n",
        "automata to complex undecidability results. You'll learn to use tools like\n",
        "[Jupyter Notebooks](https://jupyter.org/) and [Quarto](https://quarto.org/) to\n",
        "create interactive documents that blend theoretical proofs with executable\n",
        "Python code. Throughout the course, you'll develop skills in implementing and\n",
        "analyzing algorithms, understanding computational complexity, and proving\n",
        "fundamental results in the theory of computation. In addition to learning more\n",
        "about version control, [Git](https://git-scm.com/), and\n",
        "[GitHub](https://github.com/), emerging proofgrammers will also learn how to\n",
        "use artificial intelligence (AI) assistants [GitHub\n",
        "Copilot](https://github.com/features/copilot), [Google Gemini\n",
        "CLI](https://github.com/google-gemini/gemini-cli), and\n",
        "[OpenCode](https://opencode.ai/) to create, revise, and extend both theoretical\n",
        "proofs and source code implementations. Check out the\n",
        "[schedule](schedule/index.qmd) and [slides](slides/index.qmd) to begin your\n",
        "journey as a proofgrammer!\n",
        "\n",
        "## Python for Theory of Computation\n",
        "\n",
        "As you explore the technical resources on this site, you'll discover how Python\n",
        "can transform the way that proofgrammers work with theoretical concepts. Notice\n",
        "how proofgramming is practical, challenging, and fun! For instance, here's a\n",
        "simple example of a Python implementation of a `count_lines` function that\n",
        "counts the number of lines in a source code file; it is an example of a\n",
        "computable problem. This function takes a file path, opens the file, and counts\n",
        "each line, demonstrating how we can algorithmically solve problems that have\n",
        "clear, step-by-step solutions. This represents the kind of computation that is\n",
        "always decidable and tractable. Notice that the website itself includes the\n",
        "output from running this function!"
      ],
      "id": "003d17de"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "def count_lines(file_content: str) -> int:\n",
        "    \"\"\"Count the number of lines in the provided text content.\"\"\"\n",
        "    if not file_content:\n",
        "        return 0\n",
        "    lines = file_content.split('\\n')\n",
        "    return len(lines)\n",
        "\n",
        "# example source code content\n",
        "sample_code = \"\"\"def hello_world():\n",
        "    print(\"Hello, Proofgrammers!\")\n",
        "    return True\n",
        "\n",
        "def main():\n",
        "    result = hello_world()\n",
        "    print(f\"Function executed: {result}\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\"\"\"\n",
        "\n",
        "# count lines in the sample code\n",
        "line_count = count_lines(sample_code)\n",
        "print(f\"Number of lines in the sample code: {line_count}\")\n",
        "print(f\"This is a computable problem! we can always determine the line count!\")"
      ],
      "id": "28c6276a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Now, let's explore the fascinating world of **universal computation**! The\n",
        "following example demonstrates one of the most profound concepts in theoretical\n",
        "computer science: a **universal program**. This Python function executes\n",
        "another Python program, showing how one program can simulate any computation.\n",
        "This concept is fundamental to understanding the limits and possibilities of\n",
        "computation, and it's directly related to Alan Turing's work on universal\n",
        "Turing machines. Universal computation is what makes general-purpose computers\n",
        "possible and is essential to proving many results about what can and cannot be\n",
        "computed."
      ],
      "id": "cf901654"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "def universal(prog_string: str, input_string: str) -> str:\n",
        "    \"\"\"Execute a program given as a string on the provided input.\"\"\"\n",
        "    # create a local namespace for the program execution\n",
        "    local_namespace = {}\n",
        "    # execute the program definition to make the function available\n",
        "    exec(prog_string, {}, local_namespace)\n",
        "    # extract the main function from the executed program\n",
        "    main_function = None\n",
        "    for name, obj in local_namespace.items():\n",
        "        if callable(obj) and not name.startswith('_'):\n",
        "            main_function = obj\n",
        "            break\n",
        "    # execute the program with the given input\n",
        "    if main_function:\n",
        "        return main_function(input_string)\n",
        "    else:\n",
        "        return \"No function found\"\n",
        "\n",
        "# example program that checks if a string contains \"GAGA\"\n",
        "contains_gaga_program = '''\n",
        "def contains_gaga(input_str):\n",
        "    \"\"\"Check if the input string contains GAGA.\"\"\"\n",
        "    if \"GAGA\" in input_str:\n",
        "        return \"yes\"\n",
        "    else:\n",
        "        return \"no\"\n",
        "'''\n",
        "\n",
        "# example program that counts vowels in a string\n",
        "count_vowels_program = '''\n",
        "def count_vowels(input_str):\n",
        "    \"\"\"Count the number of vowels in the input string.\"\"\"\n",
        "    vowels = \"aeiouAEIOU\"\n",
        "    count = sum(1 for char in input_str if char in vowels)\n",
        "    return str(count)\n",
        "'''\n",
        "\n",
        "# demonstrate example of universal computation\n",
        "test_string1 = \"HELLO GAGA WORLD\"\n",
        "test_string2 = \"programming\"\n",
        "print(\"Universal Computation in Action:\")\n",
        "print(f\"Testing contains_gaga with '{test_string1}':\")\n",
        "result1 = universal(contains_gaga_program, test_string1)\n",
        "print(f\"Result: {result1}\")\n",
        "print(f\"\\nTesting count_vowels with '{test_string2}':\")\n",
        "result2 = universal(count_vowels_program, test_string2)\n",
        "print(f\"Result: {result2}\")\n",
        "print(f\"\\nThis demonstrates universal computation where one program simulates another!\")"
      ],
      "id": "7b7f4dd3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Theory of Computation Resources\n",
        "\n",
        "Ready to embark on your journey as a proofgrammer? Start exploring here:\n",
        "\n",
        "- The [sixteen-week course schedule](./schedule/index.qmd) provides detailed\n",
        "insights into each step that learners should take to emerge as skilled\n",
        "proofgrammers, including assignments focused on implementing theoretical\n",
        "concepts, analyzing computational complexity, and projects that combine\n",
        "proofs with programming.\n",
        "\n",
        "- The [course syllabus](./syllabus/index.qmd) introduces the course and its\n",
        "learning objectives, explaining how on-campus learners will develop both their\n",
        "theoretical understanding of computational limits and their ability to use\n",
        "Python to implement and verify concepts from the theory of computation.\n",
        "\n",
        "- The [course slides](./slides/index.qmd) offers links to the slides created\n",
        "by both the instructor and the proofgrammers who are learning more about\n",
        "theoretical computer science.\n",
        "\n",
        "::: {.callout-note appearance=\"minimal\" title=\"Proofgrammers Community Resources\"}\n",
        "\n",
        "Interested in connecting with other aspiring proofgrammers? Please join the\n",
        "[Proofgrammers Discord Server](https://discord.gg/Mw9mybGK7u) and join the\n",
        "conversation about theoretical computer science, Python programming, and\n",
        "computational theory! If you are an on-campus learner at Allegheny College, you\n",
        "may also join the [Allegheny College Computer Science Discord\n",
        "Server](https://discord.gg/CS2h9kXzX6). Finally, if you are an on-campus\n",
        "learner, you can schedule an office hours appointment by visiting the [Course\n",
        "Instructor's Appointment\n",
        "Scheduler](https://www.gregorykapfhammer.com/schedule/).\n",
        "\n",
        ":::"
      ],
      "id": "32058822"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\bhana\\AppData\\Local\\Programs\\Python\\Python313\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}